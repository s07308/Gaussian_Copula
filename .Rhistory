knitr::opts_chunk$set(echo = TRUE)
library(survival)
size <- 200
X1 <- rbinom(n = size, size = 1, prob = 0.5)
T11 <- rweibull(n = size, shape = 2, scale = 4)
T12 <- rweibull(n = size, shape = 0.5, scale = sqrt(pi))
T1 <- ifelse(X1 == 1, T11, T12)
C <- rexp(n = size, rate = 0.3)
Y1 <- ifelse(T1 < C, T1, C)
delta <- ifelse(T1 < C, 1, 0)
mean(T11)
mean(T12)
sd(T11)
sd(T12)
df.pair <- matrix(nrow = choose(n = size, k = 2), ncol = 8)
k <- 1
for(i in seq(1, size - 1)) {
for(j in seq(i + 1, size)) {
df.pair[k, ] <- c(X1[i], Y1[i], delta[i], T1[i], X1[j], Y1[j], delta[j], T1[j])
k <- k + 1
}
}
C.rate <- 0.03
size <- 200
set.seed(20200624)
sim <- replicate(n = 500, expr = {
## generate (Y, delta, X), where X is binary and Y is lifetime with censoring
X1 <- rbinom(n = size, size = 1, prob = 0.5)
T11 <- rweibull(n = size, shape = 2, scale = 4)
T12 <- rweibull(n = size, shape = 0.5, scale = sqrt(pi))
T1 <- ifelse(X1 == 1, T11, T12)
C <- rexp(n = size, rate = C.rate)
Y1 <- ifelse(T1 < C, T1, C)
delta <- ifelse(T1 < C, 1, 0)
df.pair <- matrix(nrow = choose(n = size, k = 2), ncol = 8)
k <- 1
for(i in seq(1, size - 1)) {
for(j in seq(i + 1, size)) {
df.pair[k, ] <- c(X1[i], Y1[i], delta[i], T1[i], X1[j], Y1[j], delta[j], T1[j])
k <- k + 1
}
}
G.fit1 <- survfit(Surv(time = Y1[X1 == 1], event = 1 - delta[X1 == 1]) ~ 1)
G.fit0 <- survfit(Surv(time = Y1[X1 == 0], event = 1 - delta[X1 == 0]) ~ 1)
G_func1 <- stepfun(x = G.fit1$time, y = c(1, G.fit1$surv))
G_func0 <- stepfun(x = G.fit0$time, y = c(1, G.fit0$surv))
H10.hat <- function(x, y, X1.obs = X1, T1.obs = Y1) {
if(x == 0) {
if(G_func0(y) == 0) return(0)
return(mean(T1.obs[X1.obs == 0] > y) / G_func0(y))
} else {
if(G_func1(y) == 0) return(0)
return(mean(T1.obs[X1.obs == 1] > y) / G_func1(y))
}
}
H11.hat <- function(x, y, X1.obs = X1, T1.obs = Y1) {
left <- H10.hat(x, y - 1e-3)
right <- H10.hat(x, y)
return(left - right)
}
## imputation
c.hat <- numeric(nrow(df.pair))
d.hat <- numeric(nrow(df.pair))
for(k in seq(1, nrow(df.pair))) {
if(df.pair[k, 1] > df.pair[k, 5]) {
## xi > xi'
if(df.pair[k, 2] > df.pair[k, 6]) {
## yi > yi'
H10.hat.i <- H10.hat(0, df.pair[k, 2])
H10.hat.ip <- H10.hat(0, df.pair[k, 6])
if(df.pair[k, 7] == 1) {
c.hat[k] <- 1
d.hat[k] <- 0
} else if(df.pair[k, 3] == 1 & df.pair[k, 7] == 0) {
d.hat[k] <- ifelse(H10.hat.ip == 0, 0, H10.hat.i / H10.hat.ip)
c.hat[k] <- 1 - d.hat[k]
} else {
t <- Y1[Y1 > df.pair[k, 2] & X1 == 1]
if(length(t) == 0) {
c.hat[k] <- 0
d.hat[k] <- 0
} else {
integral.c <- numeric(length(t))
integral.d <- numeric(length(t))
for(m in seq(1, length(t))) {
integral.c[m] <- (H10.hat.ip - H10.hat(0, t[m])) * H11.hat(1, t[m])
integral.d[m] <- H10.hat(0, t[m]) * H11.hat(1, t[m])
}
c.hat[k] <- sum(integral.c) / H10.hat(1, df.pair[k, 2]) / H10.hat.ip
d.hat[k] <- sum(integral.d) / H10.hat(1, df.pair[k, 2]) / H10.hat.ip
c.hat[k] <- ifelse(H10.hat.ip * H10.hat(1, df.pair[k, 2]) == 0, 0, c.hat[k])
d.hat[k] <- ifelse(H10.hat.ip * H10.hat(1, df.pair[k, 2]) == 0, 0, d.hat[k])
}
}
} else {
## yi < yi'
H10.hat.i <- H10.hat(1, df.pair[k, 2])
H10.hat.ip <- H10.hat(1, df.pair[k, 6])
if(df.pair[k, 3] == 1) {
c.hat[k] <- 0
d.hat[k] <- 1
} else if(df.pair[k, 3] == 0 & df.pair[k, 7] == 1) {
c.hat[k] <- ifelse(H10.hat.i == 0, 0, H10.hat.ip / H10.hat.i)
d.hat[k] <- 1 - c.hat[k]
} else {
s <- Y1[Y1 > df.pair[k, 6] & X1 == 0]
if(length(s) == 0) {
c.hat[k] <- 0
d.hat[k] <- 0
} else {
integral.c <- numeric(length(s))
integral.d <- numeric(length(s))
for(m in seq(1, length(s))) {
integral.c[m] <- H10.hat(1, s[m]) * H11.hat(0, s[m])
integral.d[m] <- (H10.hat.i - H10.hat(1, s[m])) * H11.hat(0, s[m])
}
c.hat[k] <- sum(integral.c) / H10.hat.i / H10.hat(0, df.pair[k, 6])
d.hat[k] <- sum(integral.d) / H10.hat.i / H10.hat(0, df.pair[k, 6])
c.hat[k] <- ifelse(H10.hat.i * H10.hat(0, df.pair[k, 6]) == 0, 0, c.hat[k])
d.hat[k] <- ifelse(H10.hat.i * H10.hat(0, df.pair[k, 6]) == 0, 0, d.hat[k])
}
}
}
}
if(df.pair[k, 1] < df.pair[k, 5]) {
## xi < xi'
if(df.pair[k, 2] > df.pair[k, 6]) {
## yi > yi'
H10.hat.i <- H10.hat(1, df.pair[k, 2])
H10.hat.ip <- H10.hat(1, df.pair[k, 6])
if(df.pair[k, 7] == 1) {
c.hat[k] <- 0
d.hat[k] <- 1
} else if(df.pair[k, 3] == 1 & df.pair[k, 7] == 0) {
c.hat[k] <- ifelse(H10.hat.ip == 0, 0, H10.hat.i / H10.hat.ip)
d.hat[k] <- 1 - c.hat[k]
} else {
t <- Y1[Y1 > df.pair[k, 2] & X1 == 0]
if(length(t) == 0) {
c.hat[k] <- 0
d.hat[k] <- 0
} else {
integral.c <- numeric(length(t))
integral.d <- numeric(length(t))
for(m in seq(1, length(t))) {
integral.c[m] <- H10.hat(1, t[m]) * H11.hat(0, t[m])
integral.d[m] <- (H10.hat.ip - H10.hat(1, t[m])) * H11.hat(0, t[m])
}
c.hat[k] <- sum(integral.c) / H10.hat(0, df.pair[k, 2]) / H10.hat.ip
d.hat[k] <- sum(integral.d) / H10.hat(0, df.pair[k, 2]) / H10.hat.ip
c.hat[k] <- ifelse(H10.hat.ip * H10.hat(0, df.pair[k, 2]) == 0, 0, c.hat[k])
d.hat[k] <- ifelse(H10.hat.ip * H10.hat(0, df.pair[k, 2]) == 0, 0, d.hat[k])
}
}
} else {
## yi < yi'
H10.hat.i <- H10.hat(0, df.pair[k, 2])
H10.hat.ip <- H10.hat(0, df.pair[k, 6])
if(df.pair[k, 3] == 1) {
c.hat[k] <- 1
d.hat[k] <- 0
} else if(df.pair[k, 3] == 0 & df.pair[k, 7] == 1) {
d.hat[k] <- ifelse(H10.hat.i == 0, 0, H10.hat.ip / H10.hat.i)
c.hat[k] <- 1 - d.hat[k]
} else {
s <- Y1[Y1 > df.pair[k, 6] & X1 == 1]
if(length(s) == 0) {
c.hat[k] <- 0
d.hat[k] <- 0
} else {
integral.c <- numeric(length(s))
integral.d <- numeric(length(s))
for(m in seq(1, length(s))) {
integral.c[m] <- (H10.hat.i - H10.hat(0, s[m])) * H11.hat(1, s[m])
integral.d[m] <- H10.hat(0, s[m]) * H11.hat(1, s[m])
}
c.hat[k] <- sum(integral.c) / H10.hat(1, df.pair[k, 6]) / H10.hat.i
d.hat[k] <- sum(integral.d) / H10.hat(1, df.pair[k, 6]) / H10.hat.i
c.hat[k] <- ifelse(H10.hat.i * H10.hat(1, df.pair[k, 6]) == 0, 0, c.hat[k])
d.hat[k] <- ifelse(H10.hat.i * H10.hat(1, df.pair[k, 6]) == 0, 0, d.hat[k])
}
}
}
}
if(is.na(c.hat[k]) | is.na(d.hat[k])) {
print(df.pair[k, ])
}
if(abs(c.hat[k]) > 1 | abs(d.hat[k]) > 1) {
# print(c(k, c.hat[k], d.hat[k]))
}
}
tau.imputed <- sum(c.hat) - sum(d.hat)
tau.true <- sum((df.pair[, 1] - df.pair[, 5]) * ifelse(df.pair[, 4] > df.pair[, 8], 1, -1))
c.true <- sum((df.pair[, 1] - df.pair[, 5]) * ifelse(df.pair[, 4] > df.pair[, 8], 1, -1) > 0)
d.true <- sum((df.pair[, 1] - df.pair[, 5]) * ifelse(df.pair[, 4] > df.pair[, 8], 1, -1) < 0)
n0 <- sum(X1 == 0)
n1 <- sum(X1 == 1)
logrank <- survdiff(Surv(time = Y1, event = delta) ~ X1)
gehan <- survdiff(Surv(time = Y1, event = delta) ~ X1, rho = 1)
return(list(bias = (tau.imputed - tau.true) / n0 / n1,
C.rate = mean(delta),
tau.true = tau.true / n0 / n1,
c.hat = sum(c.hat) / n0 / n1,
d.hat = sum(d.hat) / n0 / n1,
c.true = c.true / n0 / n1,
d.true = d.true / n0 / n1,
tau.hat = tau.imputed / n0 / n1,
logrank = logrank$chisq,
gehan = gehan$chisq))
})
hist(unlist(sim["bias", ]), xlab = NA)
par(mfrow = c(1, 3))
hist((unlist(sim["tau.hat", ]) / sd(unlist(sim["tau.hat", ]))) ^ 2,
main = "proposed",
xlab = "chisq")
hist(unlist(sim["logrank", ]), main = "logrank", xlab = "chisq")
hist(unlist(sim["gehan", ]), main = "Gehan", xlab = "chisq")
mean(unlist(sim["bias", ]))
sd(unlist(sim["bias", ]))
mean(unlist(sim["tau.true", ]))
mean(unlist(sim["C.rate", ]))
mean(unlist(sim["c.true", ]))
mean(unlist(sim["c.hat", ]))
mean(unlist(sim["d.true", ]))
mean(unlist(sim["d.hat", ]))
## proposed test statisitcs
mean(unlist(sim["c.hat", ]) - unlist(sim["d.hat", ]))
proposed.ts <- (unlist(sim["tau.hat", ]) / sd(unlist(sim["tau.hat", ]))) ^ 2
mean(proposed.ts > qchisq(0.95, df = 1))
mean(unlist(sim["logrank", ]) > qchisq(0.95, df = 1))
mean(unlist(sim["gehan", ]) > qchisq(0.95, df = 1))
mean(unlist(sim["c.true", ]))
mean(unlist(sim["c.hat", ]))
mean(unlist(sim["d.true", ]))
mean(unlist(sim["d.hat", ]))
## proposed test statisitcs
mean(unlist(sim["c.hat", ]) - unlist(sim["d.hat", ]))
proposed.ts <- (unlist(sim["tau.hat", ]) / sd(unlist(sim["tau.hat", ]))) ^ 2
mean(proposed.ts > qchisq(0.95, df = 1))
mean(unlist(sim["logrank", ]) > qchisq(0.95, df = 1))
mean(unlist(sim["gehan", ]) > qchisq(0.95, df = 1))
sd(proposed.ts)
sd(unlist(sim["logrank", ]))
sd(unlist(sim["gehan", ]))
wilcox.test(x = T1[X1 == 1], y = T1[X1 == 0], alternative = "two.sided")
wilcox <- wilcox.test(x = T1[X1 == 1], y = T1[X1 == 0], alternative = "two.sided")
wilcox$statistic
wilcox$parameter
wilcox$p.value
wilcox$null.value
wilcox$alternative
